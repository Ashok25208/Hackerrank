DP-Coin change
#include<stdio.h>

// Returns the count of ways we can sum S[0...m-1] coins to get sum n
int count( int S[], int m, int n )
{
	// If n is 0 then there is 1 solution (do not include any coin)
	if (n == 0)
		return 1;
	
	// If n is less than 0 then no solution exists
	if (n < 0)
		return 0;
	// If there are no coins and n is greater than 0, then no solution exist
	if (m <=0 && n >= 1)
		return 0;
	// count is sum of solutions (i) including S[m-1] (ii) excluding S[m-1]
	return count( S, m - 1, n ) + count( S, m, n-S[m-1] );
}
// Driver program to test above function
int main()
{
	int i, j;
	int arr[] = {1,2,3,5,6};
	int m = sizeof(arr)/sizeof(arr[0]);
	printf("%d ", count(arr, m, 10));
	getchar();
	return 0;
}
import java.util.Arrays;
class CoinChange
{
	static long countWays(int S[], int m, int n)
	{
		//Time complexity of this function: O(mn)
		//Space Complexity of this function: O(n)
		// table[i] will be storing the number of solutions
		// for value i. We need n+1 rows as the table is
		// constructed in bottom up manner using the base
		// case (n = 0)
		long[] table = new long[n+1];
		// Initialize all table values as 0
		Arrays.fill(table, 0); //O(n)
		// Base case (If given value is 0)
		table[0] = 1;
		// Pick all coins one by one and update the table[]
		// values after the index greater than or equal to
		// the value of the picked coin
		for (int i=0; i<m; i++)
			for (int j=S[i]; j<=n; j++)
			table[j] += table[j-S[i]];
		return table[n];
	}
	// Driver Function to test above function
	public static void main(String args[])
	{
		int arr[] = {1, 2, 3};
		int m = arr.length;
		int n = 4;
		System.out.println(countWays(arr, m, n));
	}
}

Array left rotation 2 shifts
class RotateArray 
{
	/*Function to left rotate arr[] of size n by d*/
	void leftRotate(int arr[], int d, int n) 
	{
		int i;
		for (i = 0; i < d; i++)
			leftRotatebyOne(arr, n);
	}

	void leftRotatebyOne(int arr[], int n) 
	{
		int i, temp;
		temp = arr[0];
		for (i = 0; i < n - 1; i++)
			arr[i] = arr[i + 1];
		arr[i] = temp;
	}

	/* utility function to print an array */
	void printArray(int arr[], int size) 
	{
		int i;
		for (i = 0; i < size; i++)
			System.out.print(arr[i] + " ");
	}

	// Driver program to test above functions
	public static void main(String[] args) 
	{
		RotateArray rotate = new RotateArray();
		int arr[] = {1, 2, 3, 4, 5, 6, 7};
		rotate.leftRotate(arr, 2, 7);
		rotate.printArray(arr, 7);
	}
}
// Java program to find minimum number of
// characters to be removed to make two
// strings anagram.
import java.util.*;

class GFG {

	// function to calculate minimum numbers
	// of characters to be removed to make
	// two strings anagram
	static int remAnagram(String str1, String str2)
	{
		// make hash array for both string 
		// and calculate frequency of each
		// character
		int count1[] = new int[26]; 
		int count2[] = new int[26];

		// count frequency of each charcter 
		// in first string
		for (int i = 0; i < str1.length() ; i++)
			count1[str1.charAt(i) -'a']++;
	
		// count frequency of each charcter 
		// in second string
		for (int i = 0; i < str2.length() ; i++)
			count2[str2.charAt(i) -'a']++;

		// traverse count arrays to find 
		// number of charcters to be removed
		int result = 0;
		for (int i = 0; i < 26; i++)
			result += Math.abs(count1[i] -
							count2[i]);
		return result;
	}

	// Driver program to run the case
	public static void main(String[] args)
	{
		String str1 = "bcadeh", str2 = "hea";
		System.out.println(remAnagram(str1, str2));
	}
}
// This code is contributed by Prerna Saini
// Java program to detect and remove loop in linked list

class LinkedList {

	static Node head;

	static class Node {

		int data;
		Node next;

		Node(int d) {
			data = d;
			next = null;
		}
	}

	// Function that detects loop in the list
	int detectAndRemoveLoop(Node node) {
		Node slow = node, fast = node;
		while (slow != null && fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;

			// If slow and fast meet at same point then loop is present
			if (slow == fast) {
				removeLoop(slow, node);
				return 1;
			}
		}
		return 0;
	}

	// Function to remove loop
	void removeLoop(Node loop, Node curr) {
		Node ptr1 = null, ptr2 = null;

		/* Set a pointer to the beging of the Linked List and
		move it one by one to find the first node which is
		part of the Linked List */
		ptr1 = curr;
		while (1 == 1) {

			/* Now start a pointer from loop_node and check if it ever
			reaches ptr2 */
			ptr2 = loop;
			while (ptr2.next != loop && ptr2.next != ptr1) {
				ptr2 = ptr2.next;
			}

			/* If ptr2 reahced ptr1 then there is a loop. So break the
			loop */
			if (ptr2.next == ptr1) {
				break;
			}

			/* If ptr2 did't reach ptr1 then try the next node after ptr1 */
			ptr1 = ptr1.next;
		}

		/* After the end of loop ptr2 is the last node of the loop. So
		make next of ptr2 as NULL */
		ptr2.next = null;
	}

	// Function to print the linked list
	void printList(Node node) {
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
	}

	// Driver program to test above functions
	public static void main(String[] args) {
		LinkedList list = new LinkedList();
		list.head = new Node(50);
		list.head.next = new Node(20);
		list.head.next.next = new Node(15);
		list.head.next.next.next = new Node(4);
		list.head.next.next.next.next = new Node(10);

		// Creating a loop for testing 
		head.next.next.next.next.next = head.next.next;
		list.detectAndRemoveLoop(head);
		System.out.println("Linked List after removing loop : ");
		list.printList(head);
	}
}

// This code has been contributed by Mayank Jaiswal

Fibonacci without recursion
1. class FibonacciExample1{  
2. public static void main(String args[])  
3. {    
4.  int n1=0,n2=1,n3,i,count=10;    
5.  System.out.print(n1+" "+n2);//printing 0 and 1    
6.     
7.  for(i=2;i<count;++i)//loop starts from 2 because 0 and 1 are already printed    
8.  {    
9.   n3=n1+n2;    
10.   System.out.print(" "+n3);    
11.   n1=n2;    
12.   n2=n3;    
13.  }    
14.   
15. }}  

Fibonacci with recursion
1. class FibonacciExample2{  
2.  static int n1=0,n2=1,n3=0;    
3.  static void printFibonacci(int count){    
4.     if(count>0){    
5.          n3 = n1 + n2;    
6.          n1 = n2;    
7.          n2 = n3;    
8.          System.out.print(" "+n3);   
9.          printFibonacci(count-1);    
10.      }    
11.  }    
12.  public static void main(String args[]){    
13.   int count=10;    
14.   System.out.print(n1+" "+n2);//printing 0 and 1    
15.   printFibonacci(count-2);//n-2 because 2 numbers are already printed   
16.  }  
17. }  


Bit Manipulation _Lonely Integer
Import java.util.*;class Solution{	public static void main(String[] args) {		Scanner in=new Scanner(System.in);		int n=in.nextInt();		int[] a=new int[n];		for(int i=0;i<n;i++)		{			a[i]=in.nextInt();		}		Arrays.sort(a);		int[] b=new int[(a[a.length-1])+1];		//System.out.println("size:"+b.length);		for(int i=0;i<n;i++)		{			b[a[i]]++;		}		for(int i=0;i<b.length;i++)		{			if(b[i]==1)			{				System.out.println(i);			}		}	}}

